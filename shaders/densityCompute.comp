#version 450
#extension GL_GOOGLE_include_directive : require
#include "header.glsl"

// Poly6 kernel for density estimation
float poly6Kernel(float r, float h) 
{
    float result = 0.0;
    float hr2 = h * h - r * r;
    result = (315.0 / (64.0 * 3.14159265359 * pow(h, 9.0))) * pow(hr2, 3.0);

    return result;
}



layout(local_size_x = THREADS_PER_GROUP) in; // Define the number of threads per workgroup

layout(push_constant) uniform PushConstants {
    float dt;
} pc;

layout(std430, binding = 0) buffer storageBuffer {
	Particle particles[MAX_INSTANCE];
} ObjectData;


// TODO: currently is brute force calculation, need to optimize
// TODO: add ghost particles at boundry
void main()
{
    // TODO: move closer particles to same group 
    uint local_id = gl_LocalInvocationID.x;
    uint group_id = gl_WorkGroupID.x;  // Workgroup ID on the x dimension
    uint group_size = gl_WorkGroupSize.x;  // Number of threads per workgroup

    // Calculate global index based on workgroup ID and local ID within the workgroup
    uint global_id = group_id * group_size + local_id;

    // Ensure we do not access out of bounds
    if (global_id >= MAX_INSTANCE) return;

    vec3 currentPosition = ObjectData.particles[global_id].pos.xyz;
    vec3 currentVelocity = ObjectData.particles[global_id].velocity.xyz;

    // reset density and force
    ObjectData.particles[global_id].density = restDensity;
    ObjectData.particles[global_id].force = vec4(0.0);

    // compute density for particles
    for(uint i = 0; i < MAX_INSTANCE; ++i)
    {
        if(global_id == i) continue; // skip the current particle
        vec3 neighborPosition = ObjectData.particles[i].pos.xyz;
        vec3 neighborVelocity = ObjectData.particles[i].velocity.xyz;

        vec3 rVec = currentPosition - neighborPosition;
        float r = length(rVec);

        if (r >= 0.0 && r <= smoothingLength)
        {
            float kernelValue = poly6Kernel(r, smoothingLength);
            ObjectData.particles[global_id].density += kernelValue * particleMass;
        }
        

    }

    
}