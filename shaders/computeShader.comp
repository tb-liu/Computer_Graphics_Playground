#version 450
#extension GL_GOOGLE_include_directive : require
#include "header.glsl"


layout(local_size_x = 256) in; // Define the number of threads per workgroup

layout(push_constant) uniform PushConstants {
    float dt;
} pc;

layout(std430, binding = 0) buffer storageBuffer {
	Particle particles[MAX_INSTANCE];
} ObjectData;

void main()
{
    uint local_id = gl_LocalInvocationID.x;
    uint group_id = gl_WorkGroupID.x;  // Workgroup ID on the x dimension
    uint group_size = gl_WorkGroupSize.x;  // Number of threads per workgroup

    // Calculate global index based on workgroup ID and local ID within the workgroup
    uint global_id = group_id * group_size + local_id;

    // Ensure we do not access out of bounds
    if (global_id >= ObjectData.particles[global_id].pos.length()) return;

    // Access the portion of the array specific to this workgroup
    vec4 currentPosition = ObjectData.particles[global_id].pos;
    vec4 currentVelocity = ObjectData.particles[global_id].velocity;

    // Simple physics update
    ObjectData.particles[global_id].pos.xyz += currentVelocity.xyz * pc.dt;
}